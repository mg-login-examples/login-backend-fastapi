name: Push-to-EC2

# Trigger deployment only on push to main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  api-tests-with-deps:
    name: Run API Tests with Docker using MySQL, Mongo, Redis based tokens, PubSub[Redis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the files
        uses: actions/checkout@v3
      - name: Add mysql password text file for a test mysql container
        run: echo "password_mysql" > docker_secrets/mysql_pwd.txt
      - name: Add mongo password text file for a test mongo container
        run: echo "password_mongo" > docker_secrets/mongo_pwd.txt
      - name: Add redis password text file for a test redis container
        run: echo "password_redis" > docker_secrets/redis_pwd.txt
      - name: Run backend tests
        run: sudo ./scripts_docker.sh run-api-tests
      # - name: Zip allure reports
      #   if: success() || failure()
      #   run: cd src/test && mv allure-results results && zip -r results.zip results
      # - name: Copy zipped reports to allure server
      #   if: success() || failure()
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.HOST_DNS }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: 22
      #     source: "src/test/results.zip"
      #     target: "/home/ubuntu/allure-docker/projects/backend/"
      #     strip_components: 2
      # - name: Delete previous allure-results folder, unzip new results and delete zipped results, and generate report
      #   if: success() || failure()
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST_DNS }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: 22
      #     script: >-
      #       cd /home/ubuntu/allure-docker/projects/backend &&
      #       sudo rm -rf results &&
      #       unzip results.zip &&
      #       rm results.zip &&
      #       curl http://localhost:5050/allure-docker-service/generate-report?project_id=backend

  api-tests-no-deps:
    name: Run API Tests without Docker using SQLite, Mongo, File based tokens, PubSub[In_Memory]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout the files
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.12.2
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.8.2
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Run db migrations
        run: poetry run alembic -c alembic.sqlite.ini upgrade head
      - name: Add admin user
        run: poetry run python main.py add_admin_user admin@admin.admin admin
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: latest
          mongodb-username: root_user
          mongodb-password: password_mongo
      - name: Run backend tests
        run: poetry run pytest test/integration_and_unit_tests/ --alluredir='./test/allure-results'
        env:
          MONGO_USERNAME: root_user
          MONGO_PASSWORD: password_mongo
      # - name: Zip allure reports
      #   if: success() || failure()
      #   run: cd src/test && mv allure-results results && zip -r results.zip results
      # - name: Copy zipped reports to allure server
      #   if: success() || failure()
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.HOST_DNS }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: 22
      #     source: "src/test/results.zip"
      #     target: "/home/ubuntu/allure-docker/projects/backend-localdb/"
      #     strip_components: 2
      # - name: Delete previous allure-results folder, unzip new results and delete zipped results, and generate report
      #   if: success() || failure()
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST_DNS }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: 22
      #     script: >-
      #       cd /home/ubuntu/allure-docker/projects/backend-localdb &&
      #       sudo rm -rf results &&
      #       unzip results.zip &&
      #       rm results.zip &&
      #       curl http://localhost:5050/allure-docker-service/generate-report?project_id=backend-localdb

  e2e-tests-cypress:
    name: Run Cypress E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the files
        uses: actions/checkout@v2
      - name: Add mysql password text file for a test mysql container
        run: echo "password" > docker_secrets/mysql_pwd.txt
      - name: Add mongo password text file for a test mongo container
        run: echo "password" > docker_secrets/mongo_pwd.txt
      - name: Add redis password text file for a test redis container
        run: echo "password" > docker_secrets/redis_pwd.txt
      - name: Checkout frontend repo
        uses: actions/checkout@v3
        with:
          repository: mg-login-examples/login-frontend-vue-vite
          path: frontend
      - name: Add github secret mailslurp api key as a text file used as a docker secret
        run: 'echo "$MAILSLURP_API_KEY" > frontend/docker_secrets/mailslurp_api_key.txt'
        shell: bash
        env:
          MAILSLURP_API_KEY: ${{secrets.MAILSLURP_API_KEY}}
      - name: Run cypress e2e tests
        run: ./scripts_docker.sh run-e2e-tests-cypress
      # - name: Zip allure reports
      #   if: success() || failure()
      #   run: cd frontend/cypress && mv allure-results results && zip -r results.zip results
      # - name: Copy zipped reports to allure server
      #   if: success() || failure()
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.HOST_DNS }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: 22
      #     source: "frontend/cypress/results.zip"
      #     target: "/home/ubuntu/allure-docker/projects/frontend-e2e-cypress/"
      #     strip_components: 2
      # - name: Delete previous allure-results folder, unzip new results and delete zipped results, and generate report
      #   if: success() || failure()
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST_DNS }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: 22
      #     script: >-
      #       cd /home/ubuntu/allure-docker/projects/frontend-e2e-cypress &&
      #       sudo rm -rf results &&
      #       unzip results.zip &&
      #       rm results.zip &&
      #       curl http://localhost:5050/allure-docker-service/generate-report?project_id=frontend-e2e-cypress

  e2e-tests-playwright:
    name: Run Playwright E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the files
        uses: actions/checkout@v2
      - name: Add mysql password text file for a test mysql container
        run: echo "password_mysql" > docker_secrets/mysql_pwd.txt
      - name: Add mongo password text file for a test mongo container
        run: echo "password_mongo" > docker_secrets/mongo_pwd.txt
      - name: Add redis password text file for a test redis container
        run: echo "password_redis" > docker_secrets/redis_pwd.txt
      - name: Checkout frontend repo
        uses: actions/checkout@v3
        with:
          repository: mg-login-examples/login-frontend-vue-vite
          path: frontend
      - name: Run playwright e2e tests
        run: ./scripts_docker.sh run-e2e-tests-playwright
      # - name: Zip allure reports
      #   if: success() || failure()
      #   run: cd frontend/playwright && mv allure-results results && zip -r results.zip results
      # - name: Copy zipped reports to allure server
      #   if: success() || failure()
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.HOST_DNS }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: 22
      #     source: "frontend/playwright/results.zip"
      #     target: "/home/ubuntu/allure-docker/projects/frontend-e2e-playwright/"
      #     strip_components: 2
      # - name: Delete previous allure-results folder, unzip new results and delete zipped results, and generate report
      #   if: success() || failure()
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST_DNS }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: 22
      #     script: >-
      #       cd /home/ubuntu/allure-docker/projects/frontend-e2e-playwright &&
      #       sudo rm -rf results &&
      #       unzip results.zip &&
      #       rm results.zip &&
      #       curl http://localhost:5050/allure-docker-service/generate-report?project_id=frontend-e2e-playwright

  admin-app-e2e-tests-with-deps:
    name: Run Admin App E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the files
        uses: actions/checkout@v2
      - name: Add mysql password text file for a test mysql container
        run: echo "password_mysql" > docker_secrets/mysql_pwd.txt
      - name: Add mongo password text file for a test mongo container
        run: echo "password_mongo" > docker_secrets/mongo_pwd.txt
      - name: Add redis password text file for a test redis container
        run: echo "password_redis" > docker_secrets/redis_pwd.txt
      - name: Run admin app e2e tests
        run: sudo ./scripts_docker.sh run-admin-app-e2e-tests
      # - name: Zip allure reports
      #   if: success() || failure()
      #   run: cd src/test && mv allure-results results && zip -r results.zip results
      # - name: Copy zipped reports to allure server
      #   if: success() || failure()
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.HOST_DNS }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: 22
      #     source: "src/test/results.zip"
      #     target: "/home/ubuntu/allure-docker/projects/admin-app-e2e/"
      #     strip_components: 2
      # - name: Delete previous allure-results folder, unzip new results and delete zipped results, and generate report
      #   if: success() || failure()
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST_DNS }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: 22
      #     script: >-
      #       cd /home/ubuntu/allure-docker/projects/admin-app-e2e &&
      #       sudo rm -rf results &&
      #       unzip results.zip &&
      #       rm results.zip &&
      #       curl http://localhost:5050/allure-docker-service/generate-report?project_id=admin-app-e2e

  admin-app-e2e-tests-no-deps:
    name: Run Admin App E2E Tests without Docker using SQLite, Mongo, File based tokens, PubSub[In_Memory]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout the files
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.12.2
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.8.2
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Install playwright dependencies
        run: poetry run playwright install --with-deps chromium
      - name: Run db migrations
        run: poetry run alembic -c alembic.sqlite.ini upgrade head
      - name: Add admin user
        run: poetry run python main.py add_admin_user admin@admin.admin admin
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: latest
          mongodb-username: root_user
          mongodb-password: password_mongo
      - name: Run application in background
        run: poetry run python main.py &
      - name: Wait for application to be online
        run: |
          timeout=300  # Adjust timeout as needed (in seconds)
          interval=10  # Adjust interval between checks (in seconds)
          end=$((SECONDS+timeout))

          while [ $SECONDS -lt $end ]; do
            if wget --spider --no-verbose --tries=1 http://localhost:8018/api/health-check/; then
              echo "Application is online."
              break
            fi
            echo "Waiting for the application to be online..."
            sleep $interval
          done

          if [ $SECONDS -ge $end ]; then
            echo "Timeout: Application did not become online within $timeout seconds."
            exit 1
          fi
      - name: Run admin app e2e tests
        run: poetry run pytest test/admin_app_e2e_tests/ --alluredir='./test/allure-results'
        env:
          MONGO_USERNAME: root_user
          MONGO_PASSWORD: password_mongo


  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [api-tests-with-deps, api-tests-no-deps, e2e-tests-cypress, e2e-tests-playwright]
    steps:
      - name: Do not deploy
        run: echo "Do Not Deploy"
      # - name: Restart app - build new containers
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST_DNS }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     port: 22
      #     script: >-
      #       cd /home/ubuntu && 
      #       sudo rm -rf backend-fastapi-old && 
      #       mv backend-fastapi backend-fastapi-old &&
      #       git clone -b main https://github.com/mg-login-examples/login-backend-fastapi.git backend-fastapi &&
      #       cp backend-fastapi-old/docker_secrets/mysql_pwd.txt backend-fastapi/docker_secrets/ &&
      #       cp backend-fastapi-old/docker_secrets/mongo_pwd.txt backend-fastapi/docker_secrets/ &&
      #       cp backend-fastapi-old/docker_secrets/redis_pwd.txt backend-fastapi/docker_secrets/ &&
      #       sudo rm -rf backend-fastapi-old &&
      #       cd backend-fastapi &&
      #       git clone -b main https://github.com/mg-login-examples/login-frontend-vue-vite.git frontend &&
      #       ./scripts_docker.sh launch-api-cloud-dev
