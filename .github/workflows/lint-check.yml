name: Lint Check

on:
  push:
  workflow_dispatch:


jobs:
  typecheck:
    name: Do typecheck with mypy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the files
      uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.12.2
    - name: Run image
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: 1.8.2
    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
        cd src
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: |
        cd src
        poetry install
    - name: Run mypy check
      run: |
        cd src
        poetry run mypy . --exclude 'alembic_sqlite/*' --exclude 'alembic/*' --check-untyped-defs

  format-check:
    name: Do format check with black
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the files
      uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.12.2
    - name: Run image
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: 1.8.2
    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
        cd src
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: |
        cd src
        poetry install
    - name: Run black formatting check
      run: |
        cd src
        poetry run black . --check --verbose --diff --color
