name: Run Tests Without Docker

on:
  push:
  workflow_dispatch:

jobs:
  api-tests-no-deps:
    name: Run API Tests without Docker using SQLite, Mongo, File based tokens, PubSub[In_Memory]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout the files
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.12.2
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.8.2
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Run db migrations
        run: poetry run alembic -c alembic.sqlite.ini upgrade head
      - name: Add admin user
        run: poetry run python main.py add_admin_user admin@admin.admin admin
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: latest
          mongodb-username: root_user
          mongodb-password: password_mongo
      - name: Run backend tests
        run: poetry run pytest test/integration_and_unit_tests/ --alluredir='./test/allure-results'
        env:
          MONGO_USERNAME: root_user
          MONGO_PASSWORD: password_mongo

  admin-app-e2e-tests-no-deps:
    name: Run Admin App E2E Tests without Docker using SQLite, Mongo, File based tokens, PubSub[In_Memory]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout the files
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.12.2
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.8.2
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Install playwright dependencies
        run: poetry run playwright install --with-deps chromium
      - name: Run db migrations
        run: poetry run alembic -c alembic.sqlite.ini upgrade head
      - name: Add admin user
        run: poetry run python main.py add_admin_user admin@admin.admin admin
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: latest
          mongodb-username: root_user
          mongodb-password: password_mongo
      - name: Run application in background
        run: poetry run python main.py &
      - name: Wait for application to be online
        run: |
          timeout=300  # Adjust timeout as needed (in seconds)
          interval=10  # Adjust interval between checks (in seconds)
          end=$((SECONDS+timeout))

          while [ $SECONDS -lt $end ]; do
            if wget --spider --no-verbose --tries=1 http://localhost:8018/api/health-check/; then
              echo "Application is online."
              break
            fi
            echo "Waiting for the application to be online..."
            sleep $interval
          done

          if [ $SECONDS -ge $end ]; then
            echo "Timeout: Application did not become online within $timeout seconds."
            exit 1
          fi
      - name: Run admin app e2e tests
        run: poetry run pytest test/admin_app_e2e_tests/ --alluredir='./test/allure-results'
        env:
          MONGO_USERNAME: root_user
          MONGO_PASSWORD: password_mongo
